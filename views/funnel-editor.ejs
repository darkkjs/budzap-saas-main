<!-- funnel-editor.ejs -->
<!DOCTYPE html>
<html lang="pt-BR" data-theme="light">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editor de Funil - BudZap</title>
    <link href="https://cdn.jsdelivr.net/npm/daisyui@3.5.0/dist/full.css" rel="stylesheet" type="text/css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        .step-preview {
            transition: all 0.3s ease;
        }

        .step-preview:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }

        .bottom-sheet {
            transition: transform 0.3s ease-out;
        }

        .bottom-sheet.open {
            transform: translateY(0);
        }

        .bottom-sheet.closed {
            transform: translateY(100%);
        }

        @media (max-width: 640px) {
            .step-preview {
                margin-bottom: 1rem;
            }
        }

        .bg-purple-gradient {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
    </style>
</head>

<body class="bg-gray-100 min-h-screen flex flex-col">
    <nav class="bg-purple-gradient text-white p-4 shadow-lg">
        <div class="container mx-auto flex justify-between items-center">
            <h1 class="text-xl font-bold flex items-center">
                <i class="fas fa-funnel-dollar mr-2"></i>
                <span class="hidden sm:inline">
                    <%= funnel.name %>
                </span>
                <span class="sm:hidden">Funil</span>
            </h1>
            <div>
                <button onclick="toggleBottomSheet()" class="btn btn-sm btn-outline btn-white mr-2">
                    <i class="fas fa-plus mr-1"></i><span class="hidden sm:inline">Adicionar</span>
                </button>
                <button onclick="saveFunnel()" class="btn btn-sm btn-outline btn-white">
                    <i class="fas fa-save mr-1"></i><span class="hidden sm:inline">Salvar</span>
                </button>
            </div>
        </div>
    </nav>

    <main class="flex-1 p-4 overflow-y-auto container mx-auto">
        <div id="stepsList" class="space-y-4">
            <!-- Os passos serão renderizados aqui -->
        </div>
    </main>

    <!-- Bottom sheet para adicionar novos passos -->
    <div id="bottomSheet"
        class="bottom-sheet closed fixed bottom-0 left-0 right-0 bg-white shadow-lg rounded-t-xl p-4 z-50">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-lg font-semibold">Adicionar Passo</h2>
            <button onclick="toggleBottomSheet()" class="btn btn-sm btn-circle btn-ghost">✕</button>
        </div>
        <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2">
            <button onclick="addStep('text')" class="btn btn-sm btn-primary"><i
                    class="fas fa-comment mr-1"></i>Texto</button>
            <button onclick="addStep('image')" class="btn btn-sm btn-secondary"><i
                    class="fas fa-image mr-1"></i>Imagem</button>
            <button onclick="addStep('video')" class="btn btn-sm btn-accent"><i
                    class="fas fa-video mr-1"></i>Vídeo</button>
            <button onclick="addStep('audio')" class="btn btn-sm btn-info"><i
                    class="fas fa-music mr-1"></i>Áudio</button>
            <button onclick="addStep('wait')" class="btn btn-sm btn-warning"><i
                    class="fas fa-clock mr-1"></i>Espera</button>
            <button onclick="addStep('conditional')" class="btn btn-sm btn-success"><i
                    class="fas fa-code-branch mr-1"></i>Condicional</button>
            <button onclick="addStep('input')" class="btn btn-sm btn-error"><i
                    class="fas fa-keyboard mr-1"></i>Input</button>
        </div>
        <div class="text-center mt-4">
            <p class="text-sm text-gray-600">Total de passos: <span id="stepCount"
                    class="font-bold text-purple-600">0</span></p>
        </div>
    </div>

    <!-- Modal para edição de passos -->
    <div id="editModal" class="modal">
        <div class="modal-box w-11/12 max-w-5xl">
            <h3 class="font-bold text-lg" id="modalTitle">Editar Passo</h3>
            <div id="modalContent" class="py-4">
                <!-- Conteúdo dinâmico do modal -->
            </div>
            <div class="modal-action">
                <button onclick="saveStepEdit()" class="btn btn-primary">Salvar</button>
                <button onclick="closeModal()" class="btn">Cancelar</button>
            </div>
        </div>
    </div>

    <script>
        let currentFunnel = {
            _id: '<%= funnel._id %>',
            name: '<%= funnel.name %>',
            steps: JSON.parse(decodeURIComponent('<%= encodeURIComponent(JSON.stringify(funnel.steps)) %>'))
        };
        let editingStepIndex = -1;

        function renderSteps() {
            const stepsList = document.getElementById('stepsList');
            stepsList.innerHTML = '';
            currentFunnel.steps.forEach((step, index) => {
                const stepElement = document.createElement('div');
                stepElement.className = 'step-preview bg-white p-4 rounded-lg shadow-sm flex flex-col sm:flex-row sm:items-center sm:justify-between';
                stepElement.innerHTML = `
                    <div class="flex items-center mb-2 sm:mb-0">
                        <i class="fas fa-${getStepIcon(step.type)} mr-3 text-xl text-purple-600"></i>
                        <h3 class="font-semibold text-sm">${getStepTitle(step)}</h3>
                    </div>
                    <p class="text-xs text-gray-600 mb-2 sm:mb-0 sm:mx-4 flex-grow">${getStepPreview(step)}</p>
                    <div class="flex justify-end">
                        <button onclick="editStep(${index})" class="btn btn-xs btn-outline btn-primary mr-2">
                            <i class="fas fa-edit mr-1"></i>Editar
                        </button>
                        <button onclick="deleteStep(${index})" class="btn btn-xs btn-outline btn-error">
                            <i class="fas fa-trash mr-1"></i>Deletar
                        </button>
                    </div>
                `;
                stepsList.appendChild(stepElement);
            });

            document.getElementById('stepCount').textContent = currentFunnel.steps.length;

            new Sortable(stepsList, {
                animation: 150,
                ghostClass: 'bg-purple-100',
                onEnd: function (evt) {
                    const step = currentFunnel.steps.splice(evt.oldIndex, 1)[0];
                    currentFunnel.steps.splice(evt.newIndex, 0, step);
                }
            });
        }

        function toggleBottomSheet() {
            const bottomSheet = document.getElementById('bottomSheet');
            bottomSheet.classList.toggle('open');
            bottomSheet.classList.toggle('closed');
        }

        function getStepIcon(type) {
            const icons = {
                text: 'comment',
                image: 'image',
                video: 'video',
                audio: 'music',
                wait: 'clock',
                conditional: 'code-branch',
                input: 'keyboard'
            };
            return icons[type] || 'question';
        }

        function getStepTitle(step) {
            const titles = {
                text: 'Texto',
                image: 'Imagem',
                video: 'Vídeo',
                audio: 'Áudio',
                wait: 'Espera',
                conditional: 'Condicional',
                input: 'Input do Usuário'
            };
            return titles[step.type] || 'Passo';
        }

        function getStepPreview(step) {
            switch (step.type) {
                case 'text':
                    return step.content.substring(0, 30) + (step.content.length > 30 ? '...' : '');
                case 'image':
                    return 'URL da imagem';
                case 'video':
                    return 'URL do vídeo';
                case 'audio':
                    return 'URL do áudio';
                case 'wait':
                    return `Espera de ${step.delay} ms`;
                case 'conditional':
                    return `Se ${step.condition ? step.condition.substring(0, 20) + '...' : 'condição não definida'}`;
                case 'input':
                    return `Chave: ${step.inputKey || 'não definida'}`;
                default:
                    return '';
            }
        }

        function addStep(type) {
            const newStep = { type, content: '' };
            if (type === 'wait') newStep.delay = 1000;
            if (type === 'input') {
                newStep.inputKey = '';
                newStep.inputPrompt = '';
            }
            if (type === 'conditional') {
                newStep.condition = '';
                newStep.thenContent = '';
                newStep.elseContent = '';
            }
            currentFunnel.steps.push(newStep);
            renderSteps();
            editStep(currentFunnel.steps.length - 1);
            toggleBottomSheet();
        }

        function editStep(index) {
            editingStepIndex = index;
            const step = currentFunnel.steps[index];
            const modal = document.getElementById('editModal');
            const modalTitle = document.getElementById('modalTitle');
            const modalContent = document.getElementById('modalContent');

            modalTitle.textContent = `Editar ${getStepTitle(step)}`;
            modalContent.innerHTML = '';

            switch (step.type) {
                case 'text':
                    modalContent.innerHTML = `
                        <textarea id="stepContent" class="textarea textarea-bordered w-full h-32" placeholder="Digite o texto da mensagem">${step.content || ''}</textarea>
                    `;
                    break;
                case 'image':
                case 'video':
                case 'audio':
                    modalContent.innerHTML = `
                        <input type="text" id="stepContent" class="input input-bordered w-full" value="${step.content || ''}" placeholder="URL do arquivo">
                        <div id="preview" class="mt-2"></div>
                    `;
                    if (step.type === 'image' && step.content) {
                        document.getElementById('preview').innerHTML = `<img src="${step.content}" alt="Preview" class="max-w-full h-auto mt-2">`;
                    }
                    break;
                case 'wait':
                    modalContent.innerHTML = `
                        <input type="number" id="stepDelay" class="input input-bordered w-full" value="${step.delay || 1000}" min="0" step="100" placeholder="Tempo de espera em milissegundos">
                    `;
                    break;
                case 'conditional':
                    modalContent.innerHTML = `
                        <select id="conditionType" class="select select-bordered w-full mb-2">
                            <option value="contains" ${step.conditionType === 'contains' ? 'selected' : ''}>A mensagem contém</option>
                            <option value="equals" ${step.conditionType === 'equals' ? 'selected' : ''}>A mensagem é igual a</option>
                            <option value="startsWith" ${step.conditionType === 'startsWith' ? 'selected' : ''}>A mensagem começa com</option>
                            <option value="endsWith" ${step.conditionType === 'endsWith' ? 'selected' : ''}>A mensagem termina com</option>
                        </select>
                        <input type="text" id="conditionValue" class="input input-bordered w-full mb-2" value="${step.conditionValue || ''}" placeholder="Valor da condição">
                        <textarea id="thenContent" class="textarea textarea-bordered w-full h-24 mb-2" placeholder="Conteúdo se verdadeiro">${step.thenContent || ''}</textarea>
                        <textarea id="elseContent" class="textarea textarea-bordered w-full h-24" placeholder="Conteúdo se falso">${step.elseContent || ''}</textarea>
                    `;
                    break;
                case 'input':
                    modalContent.innerHTML = `
                        <input type="text" id="inputKey" class="input input-bordered w-full mb-2" value="${step.inputKey || ''}" placeholder="Chave para armazenar o input">
                        <textarea id="inputPrompt" class="textarea textarea-bordered w-full h-24" placeholder="Mensagem para solicitar o input">${step.inputPrompt || ''}</textarea>
                    `;
                    break;
            }

            modal.classList.add('modal-open');
        }

        function saveStepEdit() {
            const step = currentFunnel.steps[editingStepIndex];
            switch (step.type) {
                case 'text':
                case 'image':
                case 'video':
                case 'audio':
                    step.content = document.getElementById('stepContent').value;
                    break;
                case 'wait':
                    step.delay = parseInt(document.getElementById('stepDelay').value);
                    break;
                case 'conditional':
                    step.conditionType = document.getElementById('conditionType').value;
                    step.conditionValue = document.getElementById('conditionValue').value;
                    step.thenContent = document.getElementById('thenContent').value;
                    step.elseContent = document.getElementById('elseContent').value;
                    break;
                case 'input':
                    step.inputKey = document.getElementById('inputKey').value;
                    step.inputPrompt = document.getElementById('inputPrompt').value;
                    break;
            }
            closeModal();
            renderSteps();
        }
        function closeModal() {
            document.getElementById('editModal').classList.remove('modal-open');
            editingStepIndex = -1;
        }

        function deleteStep(index) {
            Swal.fire({
                title: 'Deletar passo?',
                text: "Esta ação não pode ser desfeita!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sim, deletar!',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    currentFunnel.steps.splice(index, 1);
                    renderSteps();
                    Swal.fire('Deletado!', 'O passo foi removido.', 'success');
                }
            });
        }

        async function saveFunnel() {
            try {
                const response = await fetch(`/funnels/api/update/${currentFunnel._id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(currentFunnel)
                });
                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Funil salvo!',
                        showConfirmButton: false,
                        timer: 1500
                    });
                } else {
                    throw new Error('Erro ao salvar funil');
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Erro ao salvar o funil'
                });
            }
        }

        document.addEventListener('DOMContentLoaded', renderSteps);
    </script>
</body>

</html>