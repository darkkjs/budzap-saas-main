<!DOCTYPE html>
<html lang="pt-BR" class="bg-gray-100">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="icon" type="image/x-icon" href="/img/icons8-b-16.png">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
        body { font-family: 'Poppins', sans-serif; }
        .animate-float { animation: float 6s ease-in-out infinite; }
        @keyframes float {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-20px); }
            100% { transform: translateY(0px); }
        }
        .animate-pulse { animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }
        @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: .5; } }
        .glass-effect {
            background: rgba(255, 255, 255, 0.25);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.18);
        }
    </style>
</head>
<body class="bg-gradient-to-br from-purple-100 to-indigo-200 min-h-screen">
    <div class="min-h-screen flex flex-col">
        <!-- Navbar -->
        <nav class="bg-gradient-to-r from-purple-600 to-indigo-600 text-white p-4 shadow-lg">
            <div class="container mx-auto flex justify-between items-center">
                <div class="flex items-center space-x-4">
                    <span class="text-sm font-medium">Bem-vindo, <%= user.name %></span>
                    <a href="/logout" class="px-4 py-2 rounded-full bg-white text-indigo-600 text-sm font-bold hover:bg-indigo-100 transition duration-300">Sair</a>
                </div>
            </div>
        </nav>

        <!-- Main Content -->
        <main class="flex-grow container mx-auto p-6 space-y-8">

            <!-- Nova seção: Alerta de Plano Gratuito -->
            <% if (user.plan === 'gratuito') { %>
            <section class="glass-effect rounded-xl p-6 shadow-lg">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-exclamation-triangle text-yellow-500 text-3xl mr-6"></i>
                    </div>
                    <div>
                        <p class="font-bold text-lg text-indigo-800">Sua conta não está ativada!</p>
                        <p class="text-indigo-600">Para liberar todas as funções e aproveitar ao máximo o BudZap, ative algum de nossos planos.</p>
                        <a href="/change-plan" class="mt-4 inline-block bg-gradient-to-r from-yellow-400 to-yellow-600 text-white font-bold py-2 px-6 rounded-full transition duration-300 ease-in-out hover:from-yellow-500 hover:to-yellow-700 transform hover:-translate-y-1">
                            Conheça nossos planos
                        </a>
                    </div>
                </div>
            </section>
            <% } %>

            <!-- Notificação mais recente -->
            <% if (user.notifications && user.notifications.length > 0) { %>
            <div class="glass-effect rounded-xl p-6 shadow-lg">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-bell text-indigo-500 text-2xl mr-4"></i>
                    </div>
                    <div>
                        <p class="font-medium text-indigo-800">
                            <%= user.notifications[user.notifications.length - 1].title %>: <%= user.notifications[user.notifications.length - 1].content %>
                        </p>
                        <p class="text-xs text-indigo-500 mt-2">
                            <%= new Date(user.notifications[user.notifications.length - 1].timestamp).toLocaleString() %>
                        </p>
                    </div>
                </div>
            </div>
            <% } %>

            <!-- Resumo do Plano -->
            <section class="glass-effect rounded-xl p-6 shadow-lg">
                <h2 class="text-2xl font-semibold mb-4 text-indigo-800">Seu Plano BudZap</h2>
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-lg text-indigo-600">Plano Atual: <span class="font-bold"><%= user.plan.charAt(0).toUpperCase() + user.plan.slice(1) %></span></p>
                        <p class="text-indigo-500">Válido até: <%= new Date(user.validUntil).toLocaleDateString() %></p>
                    </div>
                    <a href="/change-plan" class="px-6 py-3 bg-gradient-to-r from-purple-500 to-indigo-600 text-white font-bold rounded-full shadow-lg hover:from-purple-600 hover:to-indigo-700 transition duration-300 transform hover:-translate-y-1">Upgrade de Plano</a>
                </div>
            </section>

            <!-- Informações Financeiras (apenas se o Mercado Pago estiver integrado) -->
            <% if (user.mercadopago && user.mercadopago.integrationActive) { %>
            <section class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div class="glass-effect rounded-xl p-6 shadow-lg">
                    <h3 class="text-xl font-semibold mb-2 text-indigo-800">
                        <i class="fas fa-wallet mr-2 text-indigo-500"></i>Saldo do Dia
                    </h3>
                    <p class="text-3xl font-bold text-green-600" id="dailyBalance">Carregando...</p>
                </div>
                <div class="glass-effect rounded-xl p-6 shadow-lg">
                    <h3 class="text-xl font-semibold mb-2 text-indigo-800">
                        <i class="fas fa-chart-line mr-2 text-indigo-500"></i>Lucro Mensal
                    </h3>
                    <p class="text-3xl font-bold text-blue-600" id="monthlyProfit">Carregando...</p>
                </div>
                <div class="glass-effect rounded-xl p-6 shadow-lg">
                    <h3 class="text-xl font-semibold mb-2 text-indigo-800">
                        <i class="fas fa-shopping-cart mr-2 text-indigo-500"></i>Gasto Mensal
                    </h3>
                    <p class="text-3xl font-bold text-red-600" id="monthlyExpense">Carregando...</p>
                </div>
            </section>
            <% } else { %>
            <section class="glass-effect rounded-xl p-6 shadow-lg">
                <h3 class="text-xl font-semibold mb-2 text-indigo-800">
                    <i class="fas fa-link-slash mr-2 text-indigo-500"></i>Integração Mercado Pago
                </h3>
                <p class="text-indigo-600 mb-4">Conecte sua conta do Mercado Pago para ver informações financeiras detalhadas.</p>
                <a href="/integrations/mercadopago" class="px-6 py-2 bg-gradient-to-r from-purple-500 to-indigo-600 text-white font-bold rounded-full shadow-lg hover:from-purple-600 hover:to-indigo-700 transition duration-300">Configurar Integração</a>
            </section>
            <% } %>

            <!-- Estatísticas Rápidas -->
            <section class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div class="glass-effect rounded-xl p-6 shadow-lg transform hover:scale-105 transition-all duration-300">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm text-indigo-500">Instâncias WhatsApp</p>
                            <p class="text-3xl font-bold text-indigo-800">
                                <%= user.whatsappInstances.length %> / 
                                <%= limits.whatsappConnections === Infinity ? '∞' : limits.whatsappConnections %>
                            </p>
                        </div>
                        <i class="fas fa-mobile-alt text-4xl text-indigo-400 animate-bounce"></i>
                    </div>
                </div>
                <div class="glass-effect rounded-xl p-6 shadow-lg transform hover:scale-105 transition-all duration-300">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm text-indigo-500">Funis Ativos</p>
                            <p class="text-3xl font-bold text-indigo-800">
                                <%= user.funnels.length %> / 
                                <%= limits.funnels === Infinity ? '∞' : limits.funnels %>
                            </p>
                        </div>
                        <i class="fas fa-funnel-dollar text-4xl text-indigo-400 animate-bounce"></i>
                    </div>
                </div>
                <div class="bg-gradient-to-r from-purple-500 to-indigo-600 rounded-xl shadow-lg p-6 text-white transform hover:scale-105 transition-all duration-300">
                    <div class="flex items-center justify-between">
                        <div>
                            <h3 class="text-xl font-semibold mb-2">Spam Diário</h3>
                            <p class="text-4xl font-bold">
                                <%= dailyUsage.spamMessages %> / <%= limits.dailySpamMessages === Infinity ? '∞' : limits.dailySpamMessages %>
                            </p>
                            <p class="text-sm opacity-75">mensagens enviadas hoje</p>
                        </div>
                        <div class="text-5xl opacity-75">
                            <i class="fas fa-paper-plane animate-pulse"></i>
                        </div>
                    </div>
                    <div class="mt-4">
                        <div class="w-full bg-white bg-opacity-20 rounded-full h-2.5">
                            <div class="bg-white h-2.5 rounded-full" style="width: <%= (dailyUsage.spamMessages / limits.dailySpamMessages) * 100 %>%"></div>
                        </div>
                        <p class="text-xs mt-2 text-right">
                            <%= Math.round((dailyUsage.spamMessages / limits.dailySpamMessages) * 100) %>% do limite utilizado
                        </p>
                    </div>
                </div>
                <div class="glass-effect rounded-xl p-6 shadow-lg transform hover:scale-105 transition-all duration-300">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm text-indigo-500">Autorespostas Diárias</p>
                            <p class="text-3xl font-bold text-indigo-800">
                                <%= dailyUsage.autoResponses %> / 
                                <%= limits.dailyAutoResponses === Infinity ? '∞' : limits.dailyAutoResponses %>
                            </p>
                        </div>
                        <i class="fas fa-reply-all text-4xl text-indigo-400 animate-bounce"></i>
                    </div>
                </div>
            </section>

            <!-- Gráfico de Uso -->
            <section class="glass-effect rounded-xl p-6 shadow-lg">
                <h2 class="text-2xl font-semibold mb-4 text-indigo-800">Uso de Recursos</h2>
                <canvas id="resourceUsageChart" height="200"></canvas>
            </section>
        </main>
    </div>

    <script>
          let currentPage = 1;
    let transactions = [];
    const currentDate = new Date();
    const currentMonth = currentDate.getMonth();
    const currentYear = currentDate.getFullYear();
    document.addEventListener('DOMContentLoaded', function() {
        <% if (user.mercadopago && user.mercadopago.integrationActive) { %>
            loadTransactionsIncrementally();
        <% } %>
        
        // Outros códigos de inicialização, se necessário
    });

   
    async function loadFinancialData() {
        try {
            const response = await fetch('/banco/mercadopago-activities?page=1');
            const data = await response.json();

            // Atualizar saldo do dia
            document.getElementById('dailyBalance').textContent = formatCurrency(data.dailyBalance);

            // Calcular e atualizar lucro mensal e gastos mensais
            let monthlyProfit = 0;
            let monthlyExpense = 0;
            const currentDate = new Date();
            const currentMonth = currentDate.getMonth();
            const currentYear = currentDate.getFullYear();

            data.results.forEach(transaction => {
                const transactionDate = new Date(transaction.creationDate);
                if (transactionDate.getMonth() === currentMonth && transactionDate.getFullYear() === currentYear) {
                    const amount = parseFloat(transaction.amount.fraction);
                    if (amount > 0) {
                        monthlyProfit += amount;
                    } else {
                        monthlyExpense += Math.abs(amount);
                    }
                }
            });

            document.getElementById('monthlyProfit').textContent = formatCurrency(monthlyProfit);
            document.getElementById('monthlyExpense').textContent = formatCurrency(monthlyExpense);

        } catch (error) {
            console.error('Erro ao carregar dados financeiros:', error);
            document.getElementById('dailyBalance').textContent = 'Erro ao carregar';
            document.getElementById('monthlyProfit').textContent = 'Erro ao carregar';
            document.getElementById('monthlyExpense').textContent = 'Erro ao carregar';
        }
    }

    async function loadTransactionsIncrementally() {
        try {
            showLoadingOverlay();
            while (true) {
                const response = await fetch(`/banco/mercadopago-activities?page=${currentPage}`);
                const data = await response.json();
                const pageTransactions = data.results;
                
                if (pageTransactions && pageTransactions.length > 0) {
                    const filteredTransactions = pageTransactions.filter(transaction => {
                        const transactionDate = new Date(transaction.creationDate);
                        return transactionDate.getMonth() === currentMonth && transactionDate.getFullYear() === currentYear;
                    });

                    if (filteredTransactions.length === 0) {
                        break; // Sai do loop se não houver mais transações do mês atual
                    }

                    transactions = transactions.concat(filteredTransactions);
                    updateFinancialData(data.dailyBalance, transactions);
                    updateLoadingProgress(currentPage, data.totalResults);
                    currentPage++;
                } else {
                    break; // Sai do loop quando não há mais resultados
                }

                await new Promise(resolve => setTimeout(resolve, 1000)); // Delay para evitar sobrecarga
            }
            hideLoadingOverlay();
        } catch (error) {
            console.error('Erro ao carregar transações:', error);
            showErrorMessage('Não foi possível carregar todas as transações. Por favor, verifique sua conexão e tente novamente.');
            hideLoadingOverlay();
        }
    }

    function updateFinancialData(dailyBalance, transactions) {
        // Atualizar saldo do dia
        document.getElementById('dailyBalance').textContent = formatCurrency(dailyBalance);

        // Calcular e atualizar lucro mensal e gastos mensais
        let monthlyProfit = 0;
        let monthlyExpense = 0;

        transactions.forEach(transaction => {
            const amount = parseFloat(transaction.amount.fraction);
            if (amount > 0) {
                monthlyProfit += amount;
            } else {
                monthlyExpense += Math.abs(amount);
            }
        });

        document.getElementById('monthlyProfit').textContent = formatCurrency(monthlyProfit);
        document.getElementById('monthlyExpense').textContent = formatCurrency(monthlyExpense);
    }

    function formatCurrency(value) {
        return new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(value);
    }

    function showLoadingOverlay() {
        // Implementar lógica para mostrar overlay de carregamento
        console.log('Carregando...');
    }

    function hideLoadingOverlay() {
        // Implementar lógica para esconder overlay de carregamento
        console.log('Carregamento concluído');
    }

    function updateLoadingProgress(currentPage, totalResults) {
        // Implementar lógica para atualizar a barra de progresso
        console.log(`Carregando página ${currentPage} de ${Math.ceil(totalResults / 50)}`);
    }

    function showErrorMessage(message) {
        // Implementar lógica para mostrar mensagem de erro
        console.error(message);
    }



    // Função para criar o gráfico de uso de recursos
    function createResourceUsageChart() {
        const ctx = document.getElementById('resourceUsageChart').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Funis', 'Autorespostas', 'Instâncias WhatsApp'],
                datasets: [{
                    label: 'Uso Atual',
                    data: [
                        '<%= user.funnels.length %>',
                        '<%= user.autoResponseCount %>',
                        '<%= user.whatsappInstances.length %>'
                    ],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: 'Uso de Recursos'
                    }
                }
            }
        });
    }

    // Chamar a função para criar o gráfico quando a página carregar
    document.addEventListener('DOMContentLoaded', function() {
        <% if (user.mercadopago && user.mercadopago.integrationActive) { %>
        loadFinancialData();
        <% } %>
        createResourceUsageChart();
    });
    </script>
</body>
</html>