<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Comunidade de Funis - HocketZap</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css"/>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        [x-cloak] { display: none !important; }
        .funnel-card {
            transition: all 0.3s ease;
        }
        .funnel-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }
    </style>
</head>
<body class="bg-gray-100 font-sans" x-data="funnelApp()">
    <nav class="bg-gradient-to-r from-purple-600 to-indigo-600 text-white p-4 sticky top-0 z-50">
        <div class="container mx-auto flex justify-between items-center">
            <h1 class="text-2xl font-bold">Comunidade de Funis</h1>
            <div class="space-x-4 flex items-center">
                <button @click="showMyPosts()" class="hover:text-purple-200 transition">
                    <i class="fas fa-user-circle mr-1"></i> Meus Posts
                </button>
                <button @click="showLikedPosts()" class="hover:text-purple-200 transition">
                    <i class="fas fa-heart mr-1"></i> Curtidos
                </button>
                <button @click="openShareModal()" class="bg-white text-purple-600 hover:bg-purple-100 font-bold py-2 px-4 rounded transition">
                    <i class="fas fa-share-alt mr-1"></i> Compartilhar Funil
                </button>
            </div>
        </div>
    </nav>

    <div class="container mx-auto px-4 py-8">
        <div class="mb-6 bg-white p-6 rounded-lg shadow-lg">
            <h2 class="text-2xl font-semibold mb-4 text-purple-600">Filtros e Busca</h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                    <label for="searchInput" class="block text-sm font-medium text-gray-700 mb-1">Buscar funis</label>
                    <input type="text" id="searchInput" x-model="searchTerm" @input="fetchFunnels()" placeholder="Digite para buscar..." class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500">
                </div>
                <div>
                    <label for="categoryFilter" class="block text-sm font-medium text-gray-700 mb-1">Categoria</label>
                    <select id="categoryFilter" x-model="selectedCategory" @change="fetchFunnels()" class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500">
                        <option value="">Todas as categorias</option>
                        <template x-for="category in categories" :key="category">
                            <option :value="category" x-text="category"></option>
                        </template>
                    </select>
                </div>
                <div>
                    <label for="sortFilter" class="block text-sm font-medium text-gray-700 mb-1">Ordenar por</label>
                    <select id="sortFilter" x-model="sortBy" @change="fetchFunnels()" class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500">
                        <option value="recent">Mais recentes</option>
                        <option value="popular">Mais populares</option>
                        <option value="downloads">Mais baixados</option>
                        <option value="likes">Mais curtidos</option>
                    </select>
                </div>
            </div>
        </div>

        <div id="funnelList" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <template x-for="funnel in funnels" :key="funnel._id">
                <div class="funnel-card bg-white rounded-lg shadow-md overflow-hidden">
                    <div class="p-6">
                        <div class="flex items-center justify-between mb-4">
                            <div class="flex items-center">
                                <img :src="funnel.author.profileImage || '/img/default-avatar.png'" :alt="funnel.author.name" class="w-10 h-10 rounded-full mr-3 object-cover">
                                <div>
                                    <h2 class="text-xl font-semibold text-purple-600" x-text="funnel.name"></h2>
                                    <p class="text-sm text-gray-500" x-text="'Por ' + funnel.author.name"></p>
                                </div>
                            </div>
                            <span class="text-sm text-gray-500" x-text="new Date(funnel.createdAt).toLocaleDateString()"></span>
                        </div>
                        <p class="text-gray-600 mb-4" x-text="funnel.description"></p>
                        <div class="flex items-center justify-between mb-4">
                            <span class="text-sm text-gray-500"><i class="fas fa-download mr-1"></i> <span x-text="funnel.downloads"></span> downloads</span>
                            <button @click="likeFunnel(funnel._id)" class="text-gray-500 hover:text-red-500 transition" :class="{ 'text-red-500': funnel.likes.includes(currentUser._id) }">
                                <i class="far fa-heart mr-1" :class="{ 'fas': funnel.likes.includes(currentUser._id) }"></i> <span x-text="funnel.likes.length"></span>
                            </button>
                        </div>
                        <div class="flex flex-wrap mb-4">
                            <template x-for="tag in funnel.tags" :key="tag">
                                <span class="bg-purple-100 text-purple-800 text-xs font-semibold mr-2 mb-2 px-2.5 py-0.5 rounded" x-text="tag"></span>
                            </template>
                        </div>
                        <template x-if="funnel.price > 0">
                            <p class="text-lg font-bold text-green-600 mb-2" x-text="'R$ ' + funnel.price.toFixed(2)"></p>
                        </template>
                        <template x-if="funnel.requiredPlan">
                            <p class="text-sm text-blue-600 mb-2" x-text="'Plano requerido: ' + funnel.requiredPlan"></p>
                        </template>
                        <div class="mt-4 flex justify-between items-center">
                            <button @click="downloadFunnel(funnel._id)" 
                            class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition">
                        <i class="fas fa-download mr-1"></i> 
                        <span x-text="funnel.price > 0 ? 'Comprar' : 'Baixar'"></span>
                    </button>
                    <span x-show="funnel.price > 0" class="text-green-600 font-bold" x-text="funnel.price ? 'R$ ' + funnel.price.toFixed(2) : 'Gratuito'"></span>
               
                            <button @click="showComments(funnel._id)" class="text-blue-500 hover:text-blue-700 transition">
                                <i class="fas fa-comment mr-1"></i> Coment√°rios
                            </button>
                        </div>
                        <template x-if="currentUser.role === 'admin' || currentUser._id === funnel.author._id">
                            <button @click="deleteFunnel(funnel._id)" class="mt-2 bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded transition">
                                <i class="fas fa-trash mr-1"></i> Apagar Funil
                            </button>
                        </template>
                    </div>
                </div>
            </template>
        </div>

        <div class="mt-6 flex justify-center" x-show="hasMorePages">
            <button @click="loadMoreFunnels()" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition">
                <i class="fas fa-sync-alt mr-1"></i> Carregar mais
            </button>
        </div>
    </div>

    <!-- Modal para compartilhar funil -->
    <div x-show="showShareModal" class="fixed z-10 inset-0 overflow-y-auto" x-cloak>
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 transition-opacity" aria-hidden="true">
                <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
            </div>
            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">
                        Compartilhar Funil
                    </h3>
                    <div class="space-y-4">
                        <div>
                            <label for="funnelSelect" class="block text-sm font-medium text-gray-700">Selecione um funil</label>
                            <select id="funnelSelect" x-model="shareForm.funnelId" @change="loadFunnelDetails()" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                <option value="">Selecione um funil</option>
                                <% funnels.forEach(funnel => { %>
                                    <option value="<%= funnel.id %>"><%= funnel.name %></option>
                                <% }); %>
                            </select>
                        </div>
    
                        <div>
                            <label for="funnelName" class="block text-sm font-medium text-gray-700">Nome do Funil</label>
                            <input type="text" id="funnelName" x-model="shareForm.name" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                        <div>
                            <label for="funnelDescription" class="block text-sm font-medium text-gray-700">Descri√ß√£o</label>
                            <textarea id="funnelDescription" x-model="shareForm.description" rows="3" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                        </div>
                        <div>
                            <label for="funnelCategory" class="block text-sm font-medium text-gray-700">Categoria</label>
                            <input type="text" id="funnelCategory" x-model="shareForm.category" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                        <div>
                            <label for="funnelTags" class="block text-sm font-medium text-gray-700">Tags (separadas por v√≠rgula)</label>
                            <input type="text" id="funnelTags" x-model="shareForm.tags" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                        <div x-show="currentUser.role === 'admin'">
                            <label for="funnelPrice" class="block text-sm font-medium text-gray-700">Pre√ßo (opcional)</label>
                            <input type="number" id="funnelPrice" x-model="shareForm.price" step="0.01" min="0" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                        <div x-show="currentUser.role === 'admin'">
                            <label for="funnelRequiredPlan" class="block text-sm font-medium text-gray-700">Plano Requerido (opcional)</label>
                            <select id="funnelRequiredPlan" x-model="shareForm.requiredPlan" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                <option value="">Nenhum</option>
                                <option value="basic">B√°sico</option>
                                <option value="pro">Pro</option>
                                <option value="enterprise">Enterprise</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <button @click="shareFunnel()" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-purple-600 text-base font-medium text-white hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:ml-3 sm:w-auto sm:text-sm">
                        Compartilhar
                    </button>
                    <button @click="closeShareModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                        Cancelar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        function funnelApp() {
            return {
                funnels: [],
                categories: [],
                searchTerm: '',
                selectedCategory: '',
                sortBy: 'recent',
                currentPage: 1,
                hasMorePages: true,
                showShareModal: false,
                currentUser: JSON.parse('<%- JSON.stringify(user) %>'),
                shareForm: {
                    name: '',
                    description: '',
                    category: '',
                    tags: '',
                    price: 0,
                    requiredPlan: ''
                },

                init() {
            this.fetchCategories();
            this.fetchFunnels();
     
        },


                async fetchCategories() {
                    try {
                        const response = await fetch('/funnels/api/community/categories');
                        this.categories = await response.json();
                    } catch (error) {
                        console.error('Erro ao buscar categorias:', error);
                        this.showErrorToast('Erro ao carregar categorias');
                    }
                },

                async loadUserFunnels() {
            try {
                const response = await fetch('/funnels/user-funnels');
                if (response.ok) {
                    this.userFunnels = await response.json();
                } else {
                    throw new Error('Falha ao carregar funis do usu√°rio');
                }
            } catch (error) {
                console.error('Erro ao carregar funis do usu√°rio:', error);
                this.showErrorToast('Erro ao carregar seus funis');
            }
        },

        async loadFunnelDetails() {
            if (!this.shareForm.funnelId) return;

            try {
                const response = await fetch(`/funnels/api/details/${this.shareForm.funnelId}`);
                if (response.ok) {
                    const funnelDetails = await response.json();
                    this.shareForm.name = funnelDetails.name;
                    this.shareForm.description = funnelDetails.description;
                    this.shareForm.category = funnelDetails.category;
                    this.shareForm.tags = funnelDetails.tags.join(', ');
                } else {
                    throw new Error('Falha ao carregar detalhes do funil');
                }
            } catch (error) {
                console.error('Erro ao carregar detalhes do funil:', error);
                this.showErrorToast('Erro ao carregar detalhes do funil');
            }
        },

        openShareModal() {
            this.showShareModal = true;
            if (this.userFunnels.length === 0) {
                this.loadUserFunnels();
            }
        },

                async fetchFunnels(resetPage = true) {
                    if (resetPage) {
                        this.currentPage = 1;
                        this.funnels = [];
                    }

                    try {
                        const response = await fetch(`/funnels/api/community/list?page=${this.currentPage}&search=${this.searchTerm}&category=${this.selectedCategory}&sort=${this.sortBy}`);
                        const data = await response.json();
                        this.funnels = [...this.funnels, ...data.funnels];
                        this.hasMorePages = this.currentPage < data.totalPages;
                        this.currentPage = data.currentPage;
                    } catch (error) {
                        console.error('Erro ao buscar funis:', error);
                        this.showErrorToast('Erro ao carregar funis');
                    }
                },

                loadMoreFunnels() {
                    this.currentPage++;
                    this.fetchFunnels(false);
                },

                async likeFunnel(funnelId) {
                    try {
                        const response = await fetch(`/funnels/api/community/like/${funnelId}`, { method: 'POST' });
                        const data = await response.json();
                        const funnelIndex = this.funnels.findIndex(f => f._id === funnelId);
                        if (funnelIndex !== -1) {
                            this.funnels[funnelIndex].likes = data.likes;
                            this.funnels[funnelIndex].likes = data.liked 
                                ? [...this.funnels[funnelIndex].likes, this.currentUser._id]
                                : this.funnels[funnelIndex].likes.filter(id => id !== this.currentUser._id);
                        }
                        this.showSuccessToast(data.message);
                    } catch (error) {
                        console.error('Erro ao curtir funil:', error);
                        this.showErrorToast('Erro ao curtir funil');
                    }
                },

                async downloadFunnel(funnelId) {
    try {
        const response = await fetch(`/funnels/api/community/download/${funnelId}`);
        const data = await response.json();

        if (response.ok) {
            this.performDownload(data.funnel);
        } else if (response.status === 402 || (response.status === 403 && data.requiresPurchase)) {
            // Funil requer pagamento ou plano superior
            this.initiatePurchase(funnelId, data.price);
        } else {
            throw new Error(data.error || 'Falha ao baixar o funil');
        }
    } catch (error) {
        console.error('Erro ao baixar funil:', error);
        this.showErrorToast('Erro ao baixar funil: ' + error.message);
    }
},

async initiatePurchase(funnelId, price) {
    try {
        const response = await fetch(`/funnels/api/community/purchase/${funnelId}`, {
            method: 'POST'
        });
        const data = await response.json();

        if (response.ok) {
            this.showPaymentModal(data.paymentCode, data.price);
        } else {
            throw new Error(data.error || 'Falha ao iniciar compra');
        }
    } catch (error) {
        console.error('Erro ao iniciar compra:', error);
        this.showErrorToast('Erro ao iniciar compra: ' + error.message);
    }
},

showPaymentModal(paymentCode, price) {
    Swal.fire({
        title: 'Pagamento Necess√°rio',
        html: `
            <p>Para baixar este funil, √© necess√°rio efetuar o pagamento de R$ ${price.toFixed(2)}.</p>
            <p>C√≥digo de Pagamento: <strong>${paymentCode}</strong></p>
            <p>Use este c√≥digo para efetuar o pagamento atrav√©s do nosso sistema.</p>
        `,
        icon: 'info',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Entendi',
        cancelButtonText: 'Cancelar'
    }).then((result) => {
        if (result.isConfirmed) {
            // Aqui voc√™ pode redirecionar o usu√°rio para uma p√°gina de pagamento
            // ou implementar a l√≥gica de verifica√ß√£o de pagamento
            this.showSuccessToast('Aguardando confirma√ß√£o de pagamento');
        }
    });
},


                async generatePixPayment(funnelId) {
                    try {
                        const response = await fetch(`/funnels/api/community/generate-pix/${funnelId}`, {
                            method: 'POST'
                        });

                        if (response.ok) {
                            const data = await response.json();
                            this.showPixQRCode(data.qrCodeImage, data.pixCode);
                        } else {
                            throw new Error('Falha ao gerar QR Code PIX');
                        }
                    } catch (error) {
                        console.error('Erro ao gerar QR Code PIX:', error);
                        this.showErrorToast('Erro ao gerar QR Code PIX');
                    }
                },

                showPixQRCode(qrCodeImage, pixCode) {
                    Swal.fire({
                        title: 'Pagamento PIX',
                        html: `
                            <img src="${qrCodeImage}" alt="QR Code PIX" class="mx-auto mb-4">
                            <p class="mb-2">C√≥digo PIX:</p>
                            <input type="text" value="${pixCode}" class="w-full p-2 border rounded" readonly>
                            <button onclick="copyPixCode('${pixCode}')" class="mt-2 bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition">
                                Copiar c√≥digo PIX
                            </button>
                        `,
                        showConfirmButton: false,
                        showCloseButton: true,
                    });
                },

                copyPixCode(pixCode) {
                    navigator.clipboard.writeText(pixCode).then(() => {
                        this.showSuccessToast('C√≥digo PIX copiado!');
                    });
                },

                performDownload(funnel) {
                    const blob = new Blob([JSON.stringify(funnel, null, 2)], { type: 'application/json' });
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    a.download = `funnel_${funnel._id}.json`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                    this.showSuccessToast('Funil baixado com sucesso!');
                },

                async showComments(funnelId) {
                    try {
                        const response = await fetch(`/funnels/api/community/comments/${funnelId}`);
                        const comments = await response.json();

                        let commentHtml = comments.map(comment => `
                            <div class="bg-gray-100 p-3 rounded-lg mb-2">
                                <div class="flex items-center mb-2">
                                    <img src="${comment.user.profileImage || '/img/default-avatar.png'}" alt="${comment.user.name}" class="w-8 h-8 rounded-full mr-2">
                                    <p class="font-semibold">${comment.user.name}</p>
                                </div>
                                <p>${comment.content}</p>
                                <p class="text-xs text-gray-500 mt-1">${new Date(comment.createdAt).toLocaleString()}</p>
                            </div>
                        `).join('');

                        Swal.fire({
                            title: 'Coment√°rios',
                            html: `
                                <div class="max-h-60 overflow-y-auto mb-4">
                                    ${commentHtml}
                                </div>
                                <textarea id="newComment" class="w-full p-2 border rounded" placeholder="Adicione um coment√°rio..."></textarea>
                            `,
                            showCancelButton: true,
                            confirmButtonText: 'Adicionar Coment√°rio',
                            cancelButtonText: 'Fechar',
                            preConfirm: () => {
                                return document.getElementById('newComment').value;
                            }
                        }).then((result) => {
                            if (result.isConfirmed) {
                                this.addComment(funnelId, result.value);
                            }
                        });
                    } catch (error) {
                        console.error('Erro ao carregar coment√°rios:', error);
                        this.showErrorToast('Erro ao carregar coment√°rios');
                    }
                },

                async addComment(funnelId, content) {
                    try {
                        const response = await fetch(`/funnels/api/community/comment/${funnelId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ content }),
                        });

                        if (response.ok) {
                            this.showSuccessToast('Coment√°rio adicionado com sucesso!');
                            this.showComments(funnelId);
                        } else {
                            throw new Error('Falha ao adicionar coment√°rio');
                        }
                    } catch (error) {
                        console.error('Erro ao adicionar coment√°rio:', error);
                        this.showErrorToast('Erro ao adicionar coment√°rio');
                    }
                },

                async deleteFunnel(funnelId) {
                    Swal.fire({
                        title: 'Tem certeza?',
                        text: "Voc√™ n√£o poder√° reverter esta a√ß√£o!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Sim, apagar!',
                        cancelButtonText: 'Cancelar'
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            try {
                                const response = await fetch(`/funnels/api/community/delete/${funnelId}`, { method: 'DELETE' });
                                if (!response.ok) {
                                    throw new Error('Falha ao apagar o funil');
                                }
                                this.showSuccessToast('O funil foi apagado com sucesso.');
                                this.fetchFunnels();
                            } catch (error) {
                                console.error('Erro ao apagar funil:', error);
                                this.showErrorToast('Erro ao apagar funil');
                            }
                        }
                    });
                },

                openShareModal() {
                    this.showShareModal = true;
                },

                closeShareModal() {
                    this.showShareModal = false;
                    this.resetShareForm();
                },

                resetShareForm() {
                    this.shareForm = {
                        name: '',
                        description: '',
                        category: '',
                        tags: '',
                        price: 0,
                        requiredPlan: ''
                    };
                },

                async shareFunnel() {
                    try {
                        const response = await fetch('/funnels/api/community/share', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(this.shareForm),
                        });

                        if (response.ok) {
                            const result = await response.json();
                            this.closeShareModal();
                            this.fetchFunnels(true);
                            this.showSuccessToast('Funil compartilhado com sucesso!');
                        } else {
                            throw new Error('Falha ao compartilhar funil');
                        }
                    } catch (error) {
                        console.error('Erro ao compartilhar funil:', error);
                        this.showErrorToast('Erro ao compartilhar funil');
                    }
                },

                async showMyPosts() {
                    try {
                        const response = await fetch('/funnels/api/community/my-posts');
                        const data = await response.json();
                        this.funnels = data.funnels;
                    } catch (error) {
                        console.error('Erro ao buscar meus posts:', error);
                        this.showErrorToast('Erro ao buscar seus posts');
                    }
                },

                async showLikedPosts() {
                    try {
                        const response = await fetch('/funnels/api/community/liked-posts');
                        const data = await response.json();
                        this.funnels = data.funnels;
                    } catch (error) {
                        console.error('Erro ao buscar posts curtidos:', error);
                        this.showErrorToast('Erro ao buscar posts curtidos');
                    }
                },

                showSuccessToast(message) {
                    Swal.fire({
                        icon: 'success',
                        title: message,
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                    });
                },

                showErrorToast(message) {
                    Swal.fire({
                        icon: 'error',
                        title: message,
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                    });
                }
            }
        }
    </script>
</body>
</html>