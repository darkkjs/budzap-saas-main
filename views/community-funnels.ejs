<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Comunidade de Funis - HocketZap</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css"/>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        .funnel-card {
            transition: all 0.3s ease;
        }
        .funnel-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }
    </style>
</head>
<body class="bg-gray-100 font-sans">
    <nav class="bg-gradient-to-r from-purple-600 to-indigo-600 text-white p-4 sticky top-0 z-50">
        <div class="container mx-auto flex justify-between items-center">
            <h1 class="text-2xl font-bold">Comunidade de Funis</h1>
            <div class="space-x-4 flex items-center">
                <button onclick="showMyPosts()" class="hover:text-purple-200 transition">
                    <i class="fas fa-user-circle mr-1"></i> Meus Posts
                </button>
                <button onclick="showLikedPosts()" class="hover:text-purple-200 transition">
                    <i class="fas fa-heart mr-1"></i> Curtidos
                </button>
                <button onclick="openShareModal()" class="bg-white text-purple-600 hover:bg-purple-100 font-bold py-2 px-4 rounded transition">
                    <i class="fas fa-share-alt mr-1"></i> Compartilhar Funil
                </button>
            </div>
        </div>
    </nav>

    <div class="container mx-auto px-4 py-8">
        <div class="mb-6 bg-white p-6 rounded-lg shadow-lg">
            <h2 class="text-2xl font-semibold mb-4 text-purple-600">Filtros e Busca</h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                    <label for="searchInput" class="block text-sm font-medium text-gray-700 mb-1">Buscar funis</label>
                    <input type="text" id="searchInput" oninput="fetchFunnels()" placeholder="Digite para buscar..." class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500">
                </div>
                <div>
                    <label for="categoryFilter" class="block text-sm font-medium text-gray-700 mb-1">Categoria</label>
                    <select id="categoryFilter" onchange="fetchFunnels()" class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500">
                        <option value="">Todas as categorias</option>
                    </select>
                </div>
                <div>
                    <label for="sortFilter" class="block text-sm font-medium text-gray-700 mb-1">Ordenar por</label>
                    <select id="sortFilter" onchange="fetchFunnels()" class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500">
                        <option value="recent">Mais recentes</option>
                        <option value="popular">Mais populares</option>
                        <option value="downloads">Mais baixados</option>
                        <option value="likes">Mais curtidos</option>
                    </select>
                </div>
            </div>
        </div>

        <div id="funnelList" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <!-- Funnel cards will be inserted here -->
        </div>

        <div id="loadMoreContainer" class="mt-6 flex justify-center" style="display: none;">
            <button onclick="loadMoreFunnels()" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition">
                <i class="fas fa-sync-alt mr-1"></i> Carregar mais
            </button>
        </div>
    </div>

    <!-- Modal para compartilhar funil -->
    <div id="shareModal" class="fixed z-10 inset-0 overflow-y-auto" style="display: none;">
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 transition-opacity" aria-hidden="true">
                <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
            </div>
            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">
                        Compartilhar Funil
                    </h3>
                    <div class="space-y-4">
                        <div>
                            <label for="funnelSelect" class="block text-sm font-medium text-gray-700">Selecione um funil</label>
                            <select id="funnelSelect" onchange="loadFunnelDetails()" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                <option value="">Selecione um funil</option>
                                <% funnels.forEach(funnel => { %>
                                    <option value="<%= funnel.id %>"><%= funnel.name %></option>
                                <% }); %>
                            </select>
                        </div>
                        <div>
                            <label for="funnelName" class="block text-sm font-medium text-gray-700">Nome do Funil</label>
                            <input type="text" id="funnelName" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                        <div>
                            <label for="funnelDescription" class="block text-sm font-medium text-gray-700">Descrição</label>
                            <textarea id="funnelDescription" rows="3" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"></textarea>
                        </div>
                        <div>
                            <label for="funnelCategory" class="block text-sm font-medium text-gray-700">Categoria</label>
                            <input type="text" id="funnelCategory" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                        <div>
                            <label for="funnelTags" class="block text-sm font-medium text-gray-700">Tags (separadas por vírgula)</label>
                            <input type="text" id="funnelTags" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                        <div id="adminFields" style="display: none;">
                            <div>
                                <label for="funnelPrice" class="block text-sm font-medium text-gray-700">Preço (opcional)</label>
                                <input type="number" id="funnelPrice" step="0.01" min="0" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                            </div>
                            <div>
                                <label for="funnelRequiredPlan" class="block text-sm font-medium text-gray-700">Plano Requerido (opcional)</label>
                                <select id="funnelRequiredPlan" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                    <option value="">Nenhum</option>
                                    <option value="basic">Básico</option>
                                    <option value="pro">Pro</option>
                                    <option value="enterprise">Enterprise</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <button onclick="shareFunnel()" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-purple-600 text-base font-medium text-white hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:ml-3 sm:w-auto sm:text-sm">
                        Compartilhar
                    </button>
                    <button onclick="closeShareModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                        Cancelar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let funnels = [];
        let categories = [];
        let currentPage = 1;
        let hasMorePages = true;
        let currentUser = JSON.parse('<%- JSON.stringify(user) %>');
        let shareForm = {
            name: '',
            description: '',
            category: '',
            tags: '',
            price: 0,
            requiredPlan: ''
        };

        function init() {
            fetchCategories();
            fetchFunnels();
        }

        async function fetchCategories() {
            try {
                const response = await fetch('/funnels/api/community/categories');
                categories = await response.json();
                populateCategoryFilter();
            } catch (error) {
                console.error('Erro ao buscar categorias:', error);
                showErrorToast('Erro ao carregar categorias');
            }
        }

        function populateCategoryFilter() {
            const categoryFilter = document.getElementById('categoryFilter');
            categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.textContent = category;
                categoryFilter.appendChild(option);
            });
        }

        async function fetchFunnels(resetPage = true) {
            if (resetPage) {
                currentPage = 1;
                funnels = [];
            }

            const searchTerm = document.getElementById('searchInput').value;
            const selectedCategory = document.getElementById('categoryFilter').value;
            const sortBy = document.getElementById('sortFilter').value;

            try {
                const response = await fetch(`/funnels/api/community/list?page=${currentPage}&search=${searchTerm}&category=${selectedCategory}&sort=${sortBy}`);
                const data = await response.json();
                funnels = [...funnels, ...data.funnels];
                hasMorePages = currentPage < data.totalPages;
                currentPage = data.currentPage;
                renderFunnels();
            } catch (error) {
                console.error('Erro ao buscar funis:', error);
                showErrorToast('Erro ao carregar funis');
            }
        }

        function renderFunnels() {
            const funnelList = document.getElementById('funnelList');
            funnelList.innerHTML = '';

            funnels.forEach(funnel => {
                const funnelCard = createFunnelCard(funnel);
                funnelList.appendChild(funnelCard);
            });

            document.getElementById('loadMoreContainer').style.display = hasMorePages ? 'flex' : 'none';
        }

        function createFunnelCard(funnel) {
            const card = document.createElement('div');
            card.className = 'funnel-card bg-white rounded-lg shadow-md overflow-hidden';
            card.innerHTML = `
                <div class="p-6">
                    <div class="flex items-center justify-between mb-4">
                        <div class="flex items-center">
                            <img src="${funnel.author.profileImage || '/img/default-avatar.png'}" alt="${funnel.author.name}" class="w-10 h-10 rounded-full mr-3 object-cover">
                            <div>
                                <h2 class="text-xl font-semibold text-purple-600">${funnel.name}</h2>
                                <p class="text-sm text-gray-500">Por ${funnel.author.name}</p>
                            </div>
                        </div>
                        <span class="text-sm text-gray-500">${new Date(funnel.createdAt).toLocaleDateString()}</span>
                    </div>
                    <p class="text-gray-600 mb-4">${funnel.description}</p>
                    <div class="flex items-center justify-between mb-4">
                        <span class="text-sm text-gray-500"><i class="fas fa-download mr-1"></i> ${funnel.downloads} downloads</span>
                        <button onclick="likeFunnel('${funnel._id}')" class="text-gray-500 hover:text-red-500 transition ${funnel.likes.includes(currentUser._id) ? 'text-red-500' : ''}">
                            <i class="far fa-heart mr-1 ${funnel.likes.includes(currentUser._id) ? 'fas' : ''}"></i> ${funnel.likes.length}
                        </button>
                    </div>
                    <div class="flex flex-wrap mb-4">
                        ${funnel.tags.map(tag => `<span class="bg-purple-100 text-purple-800 text-xs font-semibold mr-2 mb-2 px-2.5 py-0.5 rounded">${tag}</span>`).join('')}
                    </div>
                    ${funnel.price > 0 ? `<p class="text-lg font-bold text-green-600 mb-2">R$ ${funnel.price.toFixed(2)}</p>` : ''}
                    ${funnel.requiredPlan ? `<p class="text-sm text-blue-600 mb-2">Plano requerido: ${funnel.requiredPlan}</p>` : ''}
                    <div class="mt-4 flex justify-between items-center">
                        <button onclick="downloadFunnel('${funnel._id}')" 
                                class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition">
                            <i class="fas fa-download mr-1"></i> 
                            ${funnel.price > 0 ? 'Comprar' : 'Baixar'}
                        </button>
                        <button onclick="showComments('${funnel._id}')" class="text-blue-500 hover:text-blue-700 transition">
                            <i class="fas fa-comment mr-1"></i> Comentários
                        </button>
                    </div>
                    ${currentUser.role === 'admin' || currentUser._id === funnel.author._id ? `
                        <button onclick="deleteFunnel('${funnel._id}')" class="mt-2 bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded transition">
                            <i class="fas fa-trash mr-1"></i> Apagar Funil
                        </button>
                    ` : ''}
                </div>
            `;
            return card;
        }

        function loadMoreFunnels() {
            currentPage++;
            fetchFunnels(false);
        }

        async function likeFunnel(funnelId) {
            try {
                const response = await fetch(`/funnels/api/community/like/${funnelId}`, { method: 'POST' });
                const data = await response.json();
                const funnelIndex = funnels.findIndex(f => f._id === funnelId);
                if (funnelIndex !== -1) {
                    funnels[funnelIndex].likes = data.likes;
                    funnels[funnelIndex].likes = data.liked 
                        ? [...funnels[funnelIndex].likes, currentUser._id]
                        : funnels[funnelIndex].likes.filter(id => id !== currentUser._id);
                }
                renderFunnels();
                showSuccessToast(data.message);
            } catch (error) {
                console.error('Erro ao curtir funil:', error);
                showErrorToast('Erro ao curtir funil');
            }
        }

        async function downloadFunnel(funnelId) {
            try {
                const response = await fetch(`/funnels/api/community/download/${funnelId}`);
                const data = await response.json();

                if (response.ok) {
                    performDownload(data.funnel);
                } else if (response.status === 402 || (response.status === 403 && data.requiresPurchase)) {
                    initiatePurchase(funnelId, data.price);
                } else {
                    throw new Error(data.error || 'Falha ao baixar o funil');
                }
            } catch (error) {
                console.error('Erro ao baixar funil:', error);
                showErrorToast('Erro ao baixar funil: ' + error.message);
            }
        }
        async function deleteFunnel(funnelId) {
    Swal.fire({
        title: 'Tem certeza?',
        text: "Você não poderá reverter esta ação!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Sim, apagar!',
        cancelButtonText: 'Cancelar'
    }).then(async (result) => {
        if (result.isConfirmed) {
            try {
                const response = await fetch(`/funnels/api/community/delete/${funnelId}`, { 
                    method: 'DELETE'
                });
                
                if (!response.ok) {
                    throw new Error('Falha ao apagar o funil');
                }
                
                // Remove o funil da lista local
                funnels = funnels.filter(funnel => funnel._id !== funnelId);
                
                // Atualiza a exibição
                renderFunnels();
                
                showSuccessToast('O funil foi apagado com sucesso.');
            } catch (error) {
                console.error('Erro ao apagar funil:', error);
                showErrorToast('Erro ao apagar funil');
            }
        }
    });
}

function performDownload(funnel) {
    // Cria um objeto com os dados do funil que queremos baixar
    console.log(funnel)
    const downloadData = {
        id: funnel._id,
        name: funnel.name,
        description: funnel.description,
        steps: funnel.steps, // Assumindo que o funil tem um array de steps
        createdAt: funnel.createdAt,
        updatedAt: funnel.updatedAt
    };

    // Converte o objeto em uma string JSON
    const jsonString = JSON.stringify(funnel, null, 2);

    // Cria um Blob com o conteúdo JSON
    const blob = new Blob([jsonString], { type: 'application/json' });

    // Cria uma URL para o Blob
    const url = URL.createObjectURL(blob);

    // Cria um elemento <a> temporário para iniciar o download
    const a = document.createElement('a');
    a.href = url;
    a.download = `funnel_${funnel.name}.json`;

    // Anexa o elemento ao body, clica nele e então o remove
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);

    // Libera a URL do objeto
    URL.revokeObjectURL(url);

    // Incrementa o contador de downloads (opcional)
    incrementDownloadCount(funnel._id);

    showSuccessToast('Funil baixado com sucesso!');
}

async function incrementDownloadCount(funnelId) {
    try {
        const response = await fetch(`/funnels/api/community/increment-download/${funnelId}`, {
            method: 'POST'
        });
        if (!response.ok) {
            throw new Error('Falha ao incrementar contagem de downloads');
        }
    } catch (error) {
        console.error('Erro ao incrementar contagem de downloads:', error);
    }
}

        function openShareModal() {
            document.getElementById('shareModal').style.display = 'block';
            if (userFunnels.length === 0) {
                loadUserFunnels();
            }
            if (currentUser.role === 'admin') {
                document.getElementById('adminFields').style.display = 'block';
            }
        }

        function closeShareModal() {
            document.getElementById('shareModal').style.display = 'none';
            resetShareForm();
        }

        function resetShareForm() {
            document.getElementById('funnelSelect').value = '';
            document.getElementById('funnelName').value = '';
            document.getElementById('funnelDescription').value = '';
            document.getElementById('funnelCategory').value = '';
            document.getElementById('funnelTags').value = '';
            document.getElementById('funnelPrice').value = '';
            document.getElementById('funnelRequiredPlan').value = '';
        }

        async function loadUserFunnels() {
            try {
                const response = await fetch('/funnels/user-funnels');
                if (response.ok) {
                    userFunnels = await response.json();
                    populateFunnelSelect();
                } else {
                    throw new Error('Falha ao carregar funis do usuário');
                }
            } catch (error) {
                console.error('Erro ao carregar funis do usuário:', error);
                showErrorToast('Erro ao carregar seus funis');
            }
        }

        function populateFunnelSelect() {
            const funnelSelect = document.getElementById('funnelSelect');
            funnelSelect.innerHTML = '<option value="">Selecione um funil</option>';
            userFunnels.forEach(funnel => {
                const option = document.createElement('option');
                option.value = funnel.id;
                option.textContent = funnel.name;
                funnelSelect.appendChild(option);
            });
        }

        async function loadFunnelDetails() {
            const funnelId = document.getElementById('funnelSelect').value;
            if (!funnelId) return;

            try {
                const response = await fetch(`/funnels/api/details/${funnelId}`);
                if (response.ok) {
                    const funnelDetails = await response.json();
                    document.getElementById('funnelName').value = funnelDetails.name;
                    document.getElementById('funnelDescription').value = funnelDetails.description;
                    document.getElementById('funnelCategory').value = funnelDetails.category;
                    document.getElementById('funnelTags').value = funnelDetails.tags.join(', ');
                } else {
                    throw new Error('Falha ao carregar detalhes do funil');
                }
            } catch (error) {
                console.error('Erro ao carregar detalhes do funil:', error);
                showErrorToast('Erro ao carregar detalhes do funil');
            }
        }

        async function shareFunnel() {
            const shareForm = {
                funnelId: document.getElementById('funnelSelect').value,
                name: document.getElementById('funnelName').value,
                description: document.getElementById('funnelDescription').value,
                category: document.getElementById('funnelCategory').value,
                tags: document.getElementById('funnelTags').value.split(',').map(tag => tag.trim()),
                price: parseFloat(document.getElementById('funnelPrice').value) || 0,
                requiredPlan: document.getElementById('funnelRequiredPlan').value
            };

            try {
                const response = await fetch('/funnels/api/community/share', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(shareForm),
                });

                if (response.ok) {
                    const result = await response.json();
                    closeShareModal();
                    fetchFunnels(true);
                    showSuccessToast('Funil compartilhado com sucesso!');
                } else {
                    throw new Error('Falha ao compartilhar funil');
                }
            } catch (error) {
                console.error('Erro ao compartilhar funil:', error);
                showErrorToast('Erro ao compartilhar funil');
            }
        }


        function showSuccessToast(message) {
            Swal.fire({
                icon: 'success',
                title: message,
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
            });
        }

        function showErrorToast(message) {
            Swal.fire({
                icon: 'error',
                title: message,
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
            });
        }

        // Initialize the app
        init();
    </script>
</body>
</html>