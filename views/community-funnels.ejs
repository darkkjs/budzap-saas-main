<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Comunidade de Funis - BudZap</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
    <style>
        @keyframes float {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
            100% { transform: translateY(0px); }
        }
        .float { animation: float 3s ease-in-out infinite; }
    </style>
</head>
<body class="bg-gray-100">
    <nav class="bg-purple-600 text-white p-4">
        <div class="container mx-auto flex justify-between items-center">
            <h1 class="text-2xl font-bold">Comunidade de Funis</h1>
            <div class="space-x-4">
                <a href="#" id="myPostsBtn" class="hover:text-purple-200 transition">Meus Posts</a>
                <a href="#" id="likedPostsBtn" class="hover:text-purple-200 transition">Curtidos</a>
                <a href="#" id="shareButton" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition">
                    Compartilhar Funil
                </a>
            </div>
        </div>
    </nav>

    <div class="container mx-auto px-4 py-8">
        <div class="mb-6 flex flex-wrap items-center justify-between bg-white p-4 rounded-lg shadow animate__animated animate__fadeIn">
            <div class="w-full md:w-1/3 mb-4 md:mb-0">
                <input type="text" id="searchInput" placeholder="Buscar funis..." class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500">
            </div>
            <div class="w-full md:w-1/3 mb-4 md:mb-0">
                <select id="categoryFilter" class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500">
                    <option value="">Todas as categorias</option>
                </select>
            </div>
            <div class="w-full md:w-1/3">
                <select id="sortFilter" class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-purple-500">
                    <option value="recent">Mais recentes</option>
                    <option value="popular">Mais populares</option>
                </select>
            </div>
        </div>

        <div id="funnelList" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <!-- Funis serão carregados aqui dinamicamente -->
        </div>

        <div class="mt-6 flex justify-center">
            <button id="loadMoreBtn" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition">Carregar mais</button>
        </div>
    </div>

    <!-- Modal para compartilhar funil -->
    <div id="shareFunnelModal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                        Compartilhar Funil
                    </h3>
                    <div class="mt-2">
                        <select id="funnelSelect" class="w-full mt-1 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                            <option value="">Selecione um funil</option>
                        </select>
                        <input id="funnelName" class="w-full mt-2 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" placeholder="Nome do Funil">
                        <textarea id="funnelDescription" class="w-full mt-2 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" placeholder="Descrição" rows="3"></textarea>
                        <input id="funnelCategory" class="w-full mt-2 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" placeholder="Categoria">
                        <input id="funnelTags" class="w-full mt-2 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" placeholder="Tags (separadas por vírgula)">
                    </div>
                </div>
                <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <button type="button" id="confirmShareButton" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-purple-600 text-base font-medium text-white hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:ml-3 sm:w-auto sm:text-sm">
                        Compartilhar
                    </button>
                    <button type="button" id="cancelShareButton" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                        Cancelar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentPage = 1;
        let totalPages = 1;
        const currentUser = '<%= user %>'

        document.addEventListener('DOMContentLoaded', () => {
            fetchCategories();
            fetchCommunityFunnels();

            document.getElementById('searchInput').addEventListener('input', debounce(fetchCommunityFunnels, 300));
            document.getElementById('categoryFilter').addEventListener('change', fetchCommunityFunnels);
            document.getElementById('sortFilter').addEventListener('change', fetchCommunityFunnels);
            document.getElementById('loadMoreBtn').addEventListener('click', loadMoreFunnels);

            const shareButton = document.getElementById('shareButton');
            const shareFunnelModal = document.getElementById('shareFunnelModal');
            const confirmShareButton = document.getElementById('confirmShareButton');
            const cancelShareButton = document.getElementById('cancelShareButton');
            const funnelSelect = document.getElementById('funnelSelect');

            shareButton.addEventListener('click', openShareModal);
            confirmShareButton.addEventListener('click', shareFunnel);
            cancelShareButton.addEventListener('click', closeShareModal);

            document.getElementById('myPostsBtn').addEventListener('click', fetchMyPosts);
            document.getElementById('likedPostsBtn').addEventListener('click', fetchLikedPosts);

            // Inicializar Select2
            $(funnelSelect).select2({
                placeholder: "Selecione um funil",
                allowClear: true
            });

            // Carregar funis do usuário
            loadUserFunnels();
        });

        async function fetchCategories() {
            try {
                const response = await fetch('/funnels/api/community/categories');
                const categories = await response.json();
                const categoryFilter = document.getElementById('categoryFilter');
                categories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category;
                    option.textContent = category;
                    categoryFilter.appendChild(option);
                });
            } catch (error) {
                console.error('Erro ao buscar categorias:', error);
            }
        }

        async function fetchCommunityFunnels(resetPage = true) {
            if (resetPage) {
                currentPage = 1;
            }

            const searchTerm = document.getElementById('searchInput').value;
            const category = document.getElementById('categoryFilter').value;
            const sort = document.getElementById('sortFilter').value;

            try {
                const response = await fetch(`/funnels/api/community/list?page=${currentPage}&search=${searchTerm}&category=${category}&sort=${sort}`);
                const data = await response.json();
                
                if (resetPage) {
                    document.getElementById('funnelList').innerHTML = '';
                }

                displayFunnels(data.funnels);
                totalPages = data.totalPages;
                currentPage = data.currentPage;

                document.getElementById('loadMoreBtn').style.display = currentPage >= totalPages ? 'none' : 'block';
            } catch (error) {
                console.error('Erro ao buscar funis da comunidade:', error);
            }
        }

        function displayFunnels(funnels) {
            const funnelList = document.getElementById('funnelList');
            funnels.forEach(funnel => {
                const funnelElement = document.createElement('div');
                funnelElement.className = 'bg-white rounded-lg shadow-md p-6 animate__animated animate__fadeIn';
                funnelElement.innerHTML = `
                    <div class="flex items-center mb-4">
                        <img src="${funnel.author.profileImage || '/img/default-avatar.png'}" alt="${funnel.author.name}" class="w-10 h-10 rounded-full mr-3">
                        <div>
                            <h2 class="text-xl font-semibold">${funnel.name}</h2>
                            <p class="text-sm text-gray-500">Por ${funnel.author.name}</p>
                        </div>
                    </div>
                    <p class="text-gray-600 mb-4">${funnel.description}</p>
                    <div class="flex items-center justify-between mb-4">
                        <span class="text-sm text-gray-500">${funnel.downloads} downloads</span>
                        <span class="text-sm text-gray-500">${funnel.likes} curtidas</span>
                    </div>
                    <div class="flex flex-wrap mb-4">
                        ${funnel.tags.map(tag => `<span class="bg-purple-100 text-purple-800 text-xs font-semibold mr-2 mb-2 px-2.5 py-0.5 rounded">${tag}</span>`).join('')}
                    </div>
                    <div class="mt-4 flex justify-between items-center">
                        <button onclick="downloadFunnel('${funnel._id}')" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition">
                            <svg class="w-5 h-5 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path></svg>
                            Baixar
                        </button>
                        <button onclick="likeFunnel('${funnel._id}')" class="text-purple-500 hover:text-purple-700 transition">
                            <svg class="w-6 h-6 inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path></svg>
                            Curtir
                        </button>
                        <button onclick="showComments('${funnel._id}')" class="text-blue-500 hover:text-blue-700 transition">
                            <svg class="w-6 h-6 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"></path></svg>
                            Comentários
                        </button>
                    </div>
                  ${currentUser.role === 'admin' || currentUser._id === funnel.author._id ? `
                        <button onclick="deleteFunnel('${funnel._id}')" class="mt-2 bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded transition">
                            <svg class="w-5 h-5 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                            Apagar Funil
                        </button>
                    ` : ''}
                `;
                funnelList.appendChild(funnelElement);
            });
        }

        async function downloadFunnel(funnelId) {
            try {
                const response = await fetch(`/funnels/api/community/download/${funnelId}`);
                if (!response.ok) {
                    throw new Error('Falha ao baixar o funil');
                }
                const funnel = await response.json();
                
                const blob = new Blob([JSON.stringify(funnel, null, 2)], { type: 'application/json' });
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = `funnel_${funnelId}.json`;
                
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);

                Swal.fire({
                    icon: 'success',
                    title: 'Funil baixado com sucesso!',
                    text: 'O arquivo JSON do funil foi baixado.',
                    showConfirmButton: false,
                    timer: 1500
                });
            } catch (error) {
                console.error('Erro ao baixar funil:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Erro ao baixar funil',
                    text: 'Por favor, tente novamente.',
                });
            }
        }

        async function likeFunnel(funnelId) {
            try {
                const response = await fetch(`/funnels/api/community/like/${funnelId}`, { method: 'POST' });
                if (!response.ok) {
                    throw new Error('Falha ao curtir o funil');
                }
                const data = await response.json();
                Swal.fire({
                    icon: 'success',
                    title: data.message,
                    showConfirmButton: false,
                    timer: 1500
                });
                fetchCommunityFunnels();
            } catch (error) {
                console.error('Erro ao curtir funil:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Erro ao curtir funil',
                    text: 'Por favor, tente novamente.',
                });
            }
        }

        async function showComments(funnelId) {
            try {
                const response = await fetch(`/funnels/api/community/comments/${funnelId}`);
                const comments = await response.json();

                let commentHtml = comments.map(comment => `
                    <div class="bg-gray-100 p-3 rounded-lg mb-2 animate__animated animate__fadeIn">
                        <div class="flex items-center mb-2">
                            <img src="${comment.user.profileImage || '/img/default-avatar.png'}" alt="${comment.user.name}" class="w-8 h-8 rounded-full mr-2">
                            <p class="font-semibold">${comment.user.name}</p>
                        </div>
                        <p>${comment.content}</p>
                        <p class="text-xs text-gray-500 mt-1">${new Date(comment.createdAt).toLocaleString()}</p>
                    </div>
                `).join('');

                Swal.fire({
                    title: 'Comentários',
                    html: `
                        <div class="max-h-60 overflow-y-auto mb-4">
                            ${commentHtml}
                        </div>
                        <textarea id="newComment" class="w-full p-2 border rounded" placeholder="Adicione um comentário..."></textarea>
                    `,
                    showCancelButton: true,
                    confirmButtonText: 'Adicionar Comentário',
                    cancelButtonText: 'Fechar',
                    preConfirm: () => {
                        return document.getElementById('newComment').value;
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        addComment(funnelId, result.value);
                    }
                });
            } catch (error) {
                console.error('Erro ao carregar comentários:', error);
            }
        }

        async function addComment(funnelId, content) {
            try {
                const response = await fetch(`/funnels/api/community/comment/${funnelId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ content }),
                });

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Comentário adicionado com sucesso!',
                        showConfirmButton: false,
                        timer: 1500
                    });
                    showComments(funnelId);
                } else {
                    throw new Error('Falha ao adicionar comentário');
                }
            } catch (error) {
                console.error('Erro ao adicionar comentário:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Erro ao adicionar comentário',
                    text: 'Por favor, tente novamente.',
                });
            }
        }

        async function deleteFunnel(funnelId) {
            Swal.fire({
                title: 'Tem certeza?',
                text: "Você não poderá reverter esta ação!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Sim, apagar!',
                cancelButtonText: 'Cancelar'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/funnels/api/community/delete/${funnelId}`, { method: 'DELETE' });
                        if (!response.ok) {
                            throw new Error('Falha ao apagar o funil');
                        }
                        Swal.fire(
                            'Apagado!',
                            'O funil foi apagado com sucesso.',
                            'success'
                        );
                        fetchCommunityFunnels();
                    } catch (error) {
                        console.error('Erro ao apagar funil:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Erro ao apagar funil',
                            text: 'Por favor, tente novamente.',
                        });
                    }
                }
            });
        }

        function loadMoreFunnels() {
            currentPage++;
            fetchCommunityFunnels(false);
        }

        function debounce(func, delay) {
            let timeoutId;
            return function (...args) {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(() => func.apply(this, args), delay);
            };
        }

        function openShareModal() {
            document.getElementById('shareFunnelModal').classList.remove('hidden');
        }

        function closeShareModal() {
            document.getElementById('shareFunnelModal').classList.add('hidden');
            resetShareForm();
        }

        function resetShareForm() {
            document.getElementById('funnelSelect').value = '';
            document.getElementById('funnelName').value = '';
            document.getElementById('funnelDescription').value = '';
            document.getElementById('funnelCategory').value = '';
            document.getElementById('funnelTags').value = '';
            $('#funnelSelect').trigger('change');
        }

        async function loadUserFunnels() {
            try {
                const response = await fetch('/funnels/api/list');
                const funnels = await response.json();
                const funnelSelect = document.getElementById('funnelSelect');

                funnels.forEach(funnel => {
                    const option = new Option(funnel.name, funnel.id, false, false);
                    funnelSelect.add(option);
                });

                $('#funnelSelect').trigger('change');
            } catch (error) {
                console.error('Erro ao carregar funis do usuário:', error);
            }
        }

        async function shareFunnel() {
            const funnelId = document.getElementById('funnelSelect').value;
            const name = document.getElementById('funnelName').value;
            const description = document.getElementById('funnelDescription').value;
            const category = document.getElementById('funnelCategory').value;
            const tags = document.getElementById('funnelTags').value.split(',').map(tag => tag.trim());

            if (!funnelId || !name || !description || !category) {
                Swal.fire('Erro', 'Por favor, preencha todos os campos obrigatórios.', 'error');
                return;
            }

            try {
                const response = await fetch('/funnels/api/community/share', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        funnelId,
                        name,
                        description,
                        category,
                        tags
                    }),
                });

                if (response.ok) {
                    Swal.fire('Compartilhado!', 'Seu funil foi compartilhado com sucesso.', 'success');
                    closeShareModal();
                    fetchCommunityFunnels();
                } else {
                    throw new Error('Falha ao compartilhar funil');
                }
            } catch (error) {
                console.error('Erro ao compartilhar funil:', error);
                Swal.fire('Erro', 'Não foi possível compartilhar o funil. Tente novamente.', 'error');
            }
        }

        async function fetchMyPosts() {
            try {
                const response = await fetch('/funnels/api/community/my-posts');
                const data = await response.json();
                document.getElementById('funnelList').innerHTML = '';
                displayFunnels(data.funnels);
            } catch (error) {
                console.error('Erro ao buscar meus posts:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Erro ao buscar seus posts',
                    text: 'Por favor, tente novamente.',
                });
            }
        }

        async function fetchLikedPosts() {
            try {
                const response = await fetch('/funnels/api/community/liked-posts');
                const data = await response.json();
                document.getElementById('funnelList').innerHTML = '';
                displayFunnels(data.funnels);
            } catch (error) {
                console.error('Erro ao buscar posts curtidos:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Erro ao buscar posts curtidos',
                    text: 'Por favor, tente novamente.',
                });
            }
        }

        // Inicialização do Select2 para o seletor de funis
        $(document).ready(function() {
            $('#funnelSelect').select2({
                placeholder: "Selecione um funil",
                allowClear: true
            });

            // Atualizar campos quando um funil é selecionado
            $('#funnelSelect').on('change', function() {
                const selectedFunnelId = $(this).val();
                if (selectedFunnelId) {
                    fetchFunnelDetails(selectedFunnelId);
                }
            });
        });

        async function fetchFunnelDetails(funnelId) {
            try {
                const response = await fetch(`/funnels/api/details/${funnelId}`);
                const funnel = await response.json();

                document.getElementById('funnelName').value = funnel.name;
                document.getElementById('funnelDescription').value = funnel.description || '';
                document.getElementById('funnelCategory').value = funnel.category || '';
                document.getElementById('funnelTags').value = funnel.tags ? funnel.tags.join(', ') : '';
            } catch (error) {
                console.error('Erro ao buscar detalhes do funil:', error);
            }
        }
    </script>
</body>
</html>